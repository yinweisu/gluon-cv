name: CI workflow

on: [push, pull_request_target]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v1.7.0
        with:
          auto-update-conda: true
          python-version: 3.7
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GLUONCV_DEV_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.GLUONCV_DEV_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # - name: sanity-check
      #   shell: bash -l {0}
      #   run: |
      #     conda env create -n gluon_cv_lint -f ./tests/pylint.yml
      #     conda env update -n gluon-cv-lint -f ./tests/pylint.yml --prune
      #     conda activate gluon-cv-lint
      #     conda list
      #     make clean
      #     make pylint
      # - name: unit-test
      #   shell: bash -l {0}
      #   run: |
      #     conda env create -n gluon_cv_py3_test -f tests/py3_mxnet_ci.yml
      #     conda env update -n gluon_cv_py3_test -f tests/py3_mxnet_ci.yml --prune
      #     conda activate gluon_cv_py3_test
      #     conda list
      #     export CUDA_VISIBLE_DEVICES=0
      #     export KMP_DUPLICATE_LIB_OK=TRUE
      #     make clean
      #     pip install --upgrade --force-reinstall --no-deps .
      #     env
      #     export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64
      #     export MPLBACKEND=Agg
      #     export MXNET_CUDNN_AUTOTUNE_DEFAULT=0
      #     export TINY_COCO=~/.mxnet/datasets/tiny_coco
      #     export TINY_MOTORBIKE=~/.mxnet/datasets/tiny_motorbike
      #     mkdir -p $TINY_COCO/annotations
      #     curl -s https://gluoncv-ci.s3-us-west-2.amazonaws.com/mini_coco/sub_val.zip --output sub_val.zip
      #     unzip -q sub_val.zip -d $TINY_COCO
      #     mv $TINY_COCO/sub_val $TINY_COCO/val2017
      #     curl -s https://gluoncv-ci.s3-us-west-2.amazonaws.com/mini_coco/instances_val2017_tiny.json --output instances_val2017_tiny.json
      #     mv instances_val2017_tiny.json $TINY_COCO/annotations
      #     curl -s https://gluoncv-ci.s3-us-west-2.amazonaws.com/tiny_motorbike.zip --output tiny_motorbike.zip 
      #     unzip -q tiny_motorbike.zip -d $TINY_MOTORBIKE
      #     nosetests --with-timer --timer-ok 5 --timer-warning 20 -x --with-coverage --cover-package gluoncv -v tests/unittests
      - name: Test project on AWS Batch(For push)
        shell: bash -l {0}
        if: ${{ github.event_name == 'push' }}
        run: |
          conda env create -n gluon_cv_py3_test -f tests/py3_mxnet_ci.yml
          conda env update -n gluon_cv_py3_test -f tests/py3_mxnet_ci.yml --prune
          conda activate gluon_cv_py3_test
          conda list
          export CUDA_VISIBLE_DEVICES=0
          export KMP_DUPLICATE_LIB_OK=TRUE
          make clean
          pip install --upgrade --force-reinstall --no-deps .
          echo "Start submitting job"
          python ./tools/batch/submit-job.py --region us-east-1 \
                                             --job-type g4dn.12x \
                                             --name GluonCV-GPU-Test-${{ github.ref }} \
                                             --source-ref ${{ github.ref }} \
                                             --work-dir tests \
                                             --remote https://github.com/${{ github.repository }} \
                                             --command "nosetests --with-timer --timer-ok 5 --timer-warning 20 -x --with-coverage --cover-package gluoncv -v model_zoo" \
                                             --wait
      - name: Wait for job and copy files from AWS s3
        shell: bash -l {0}
        if: ${{ failure() || success() }}
        run: |
          echo batch done
      # - name: build-docs
      #   shell: bash -l {0}
      #   run: |
      #       conda env create -n gluon_vision_docs -f docs/build.yml
      #       conda env update -n gluon_vision_docs -f docs/build.yml --prune
      #       conda activate gluon_vision_docs
      #       export PYTHONPATH=\${PWD}
      #       export CUDA_VISIBLE_DEVICES=0
      #       env
      #       export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64
      #       git submodule update --init --recursive
      #       git clean -fx
      #       pip install --upgrade --force-reinstall --no-deps .
      #       echo done pip install
      #       echo make file
      #       cd docs && make clean && make html
            